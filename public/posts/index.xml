<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Evan&#39;s Blog</title>
    <link>https://hxsxixn.github.io/posts/</link>
    <description>Recent content in Posts on Evan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You</copyright>
    <lastBuildDate>Mon, 07 Mar 2022 16:00:00 +0000</lastBuildDate><atom:link href="https://hxsxixn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用Markdown語法編寫文章</title>
      <link>https://hxsxixn.github.io/posts/2022-03-07-markdown-notes/</link>
      <pubDate>Mon, 07 Mar 2022 16:00:00 +0000</pubDate>
      
      <guid>https://hxsxixn.github.io/posts/2022-03-07-markdown-notes/</guid>
      <description>標題大小 #一級標題 ##二級標題 ###三級標題 ####四級標題 #####五級標題 ######六級標題 ##粗體
**粗體字** ##斜體
*斜體字* 無法粗體和斜體一起用,也無法利用markdown語法更改顏色</description>
    </item>
    
    <item>
      <title>java散列知识点总结</title>
      <link>https://hxsxixn.github.io/posts/2022-03-07-112233/</link>
      <pubDate>Sun, 06 Mar 2022 19:19:01 +0000</pubDate>
      
      <guid>https://hxsxixn.github.io/posts/2022-03-07-112233/</guid>
      <description>java 的根类 Object 具有 hashcode 方法。当 equal 方法被重写时也应当重写 hashcode 方法。
基本数据类型的散列码  byte short int char 类型的搜索键将会转换为 int。 float 类型的搜索键使用 Float.floatToIntBits(key) 作为散列码。 long 类型的搜索键会进行折叠操作，如下：  1iny hashCode = (int) (key ^ (key &amp;gt;&amp;gt; 32));  double 类型的搜索键会使用 Double.doubleToLongBits(key) 方法转换为 long 类型然后再进行折叠。  字符串类型的散列码 对于字符串一般使用多项式散列码进行计算，
这里放个公式的图
b的较好取值为31，33，37，39，41。在 java String 类中 b 取31。
1public static int hash(String key, int tableSize) 2{ 3 int hashVal = 0; 4 5 for (int i = 0; i &amp;lt; key.</description>
    </item>
    
    <item>
      <title>java散列知识点总结</title>
      <link>https://hxsxixn.github.io/posts/2017-02-18-hash/</link>
      <pubDate>Sat, 18 Feb 2017 19:19:01 +0000</pubDate>
      
      <guid>https://hxsxixn.github.io/posts/2017-02-18-hash/</guid>
      <description>java 的根类 Object 具有 hashcode 方法。当 equal 方法被重写时也应当重写 hashcode 方法。
基本数据类型的散列码  byte short int char 类型的搜索键将会转换为 int。 float 类型的搜索键使用 Float.floatToIntBits(key) 作为散列码。 long 类型的搜索键会进行折叠操作，如下：  1iny hashCode = (int) (key ^ (key &amp;gt;&amp;gt; 32));  double 类型的搜索键会使用 Double.doubleToLongBits(key) 方法转换为 long 类型然后再进行折叠。  字符串类型的散列码 对于字符串一般使用多项式散列码进行计算，
这里放个公式的图
b的较好取值为31，33，37，39，41。在 java String 类中 b 取31。
1public static int hash(String key, int tableSize) 2{ 3 int hashVal = 0; 4 5 for (int i = 0; i &amp;lt; key.</description>
    </item>
    
    <item>
      <title>php的闭包特性</title>
      <link>https://hxsxixn.github.io/posts/2017-01-11-php-lambada/</link>
      <pubDate>Wed, 11 Jan 2017 18:39:17 +0000</pubDate>
      
      <guid>https://hxsxixn.github.io/posts/2017-01-11-php-lambada/</guid>
      <description>闭包和匿名函数在PHP 5.3.0引入，并且PHP将两者视为相同的概念。闭包其实是伪装成函数的对象，它的实质其实是Closure实例。
创建闭包非常简单：
1$c = function($name) { 2 return sprintf(&amp;#34;Hello World! Hello %s!&amp;#34;, $name); 3}; 4 5echo $c(&amp;#39;PHP&amp;#39;); 使用use对闭包附加状态，多个参数使用,分隔：
1function callPerson($name) { 2 return function($about) use ($name) { 3 return sprintf(&amp;#34;%s, %s&amp;#34;, $name, $about); 4 } 5} 6 7$triver = callPerson(&amp;#39;Triver&amp;#39;); 8echo $triver(&amp;#34;slow down, please!!&amp;#34;); 附加的变量会被封装到闭包内，即使返回的闭包队形已经跳出了callPerson()的作用域也仍然会记住$name的值。
闭包有一个有趣的bindTo()方法，可以将闭包的内部状态绑定到其他对象上，第二个参数指定了绑定闭包的对象所属的类，从而实现在闭包中访问绑定对象的私有方法和属性。
1class Bind { 2 protected $name = &amp;#39;no name&amp;#39;; 3 public $change; 4 5 public function addAction($action) { 6 $this-&amp;gt;change = $action-&amp;gt;bindTo($this, __CLASS__); 7 } 8} 9 10$bind = new Bind(); 11$bind-&amp;gt;addAction(function() { 12 $this-&amp;gt;name = &amp;#34;php&amp;#34;; 13 return $this-&amp;gt;name; 14 }); 15 16$change = $bind-&amp;gt;change; 17echo $change(); 使用这个特性可以方便的为类添加方法并绑定：</description>
    </item>
    
  </channel>
</rss>
